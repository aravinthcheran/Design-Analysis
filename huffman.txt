
algorithm huffman(nodes[1...n])
    sort the array with the nodes in increasing order of their frequency
    for i = 1 to n - 1
        create a new node with the two nodes with the lowest frequency as children with smaller one as left child
        add the new node to the array
        remove the two nodes from the array
        sort the array with the nodes in increasing order of their frequency
    end for
    return huffman-coding(nodes[1], "")
end algorithm

algorithm huffman-coding(node, code)
    if node is a leaf
        print the character and its code
    else
        huffman-coding(node.left, code + "0")
        huffman-coding(node.right, code + "1")